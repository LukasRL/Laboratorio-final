name: Workflow
on:
  push:
    branches:
      - LR-Laboratorio-final

jobs:
  SAST:
    runs-on: ubuntu-latest
    steps:

    - name: Set up Node.js 18
      uses: actions/setup-node@v2
      with:
        node-version: '18'

    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        distribution: 'adopt'
        java-version: '17'

    - name: Install SonarCloud Scanner locally
      run: npm install sonar-scanner --save-dev
  

    - name: Run SonarCloud analysis
      run: |
        npx sonar-scanner \
            -Dsonar.projectKey=LukasRL_Laboratorio-final \
            -Dsonar.organization=lukasrl \
            -Dsonar.sources=. \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }} \
            -Dsonar.branch.name=LR-Laboratorio-final

    - name: SonarQube Quality Gate Check
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      uses: SonarSource/sonarqube-quality-gate-action@v1.1.0
      with:
        scanMetadataReportFile: './.scannerwork/report-task.txt'


#-----------------------SCA--------------------------------------
  SCA:
    # needs: SAST
    runs-on: ubuntu-latest
    steps:

    - name: Set up Node.js 20
      uses: actions/setup-node@v2
      with:
        node-version: '20'

    - name: Checkout code
      uses: actions/checkout@v2

    # - name: Set up JDK 17
    #   uses: actions/setup-java@v3
    #   with:
    #     distribution: 'adopt'
    #     java-version: '17'

    - name: Run Snyk to check for vulnerabilities
      id: snyk_scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        # args: --all-projects --severity-threshold=high --json > snyk-output.json
        args: --all-projects --severity-threshold=low --json-file-output=snyk-output.json
    
        
    - name: Process Snyk JSON output
      id: process_snyk_output
      run: |
          # Leer el archivo JSON de salida de Snyk
          snyk_output=$(cat snyk-output.json)
  
          # Extraer todas las vulnerabilidades
          vulnerabilities=$(echo "$snyk_output" | jq -c '.vulnerabilities[]')
  
          # Imprimir encabezado de la tabla
          echo "-----------------------------------------------------------------"
          printf "| %-40s | %-10s | %-15s |\n" "Package" "Severity" "ID"
          echo "-----------------------------------------------------------------"
  
          # Inicializar flag de vulnerabilidad alta
          high_severity_found=false
  
          # Imprimir cada vulnerabilidad en formato de tabla y verificar si hay alguna de alta severidad
          while IFS= read -r vulnerability; do
            package=$(echo "$vulnerability" | jq -r '.packageName')
            severity=$(echo "$vulnerability" | jq -r '.severity')
            id=$(echo "$vulnerability" | jq -r '.id')
            printf "| %-40s | %-10s | %-15s |\n" "$package" "$severity" "$id"
  
            if [[ "$severity" == "high" ]]; then
              high_severity_found=true
            fi
          done <<< "$vulnerabilities"
  
          # Imprimir pie de tabla
          echo "-----------------------------------------------------------------"
  
          # Verificar si se encontrÃ³ alguna vulnerabilidad de alta severidad
          if $high_severity_found; then
            echo "High severity vulnerabilities found. Failing the job."
            exit 1
          else
            echo "No high severity vulnerabilities found. Continuing the job."
          fi
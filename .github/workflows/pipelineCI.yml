name: Workflow
on:
  push:
    branches:
      - LR-Laboratorio-final

jobs:
  SAST:
    runs-on: ubuntu-latest
    steps:

    - name: Set up Node.js 18
      uses: actions/setup-node@v2
      with:
        node-version: '18'

    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        distribution: 'adopt'
        java-version: '17'

    - name: Install SonarCloud Scanner locally
      run: npm install sonar-scanner --save-dev
  

    - name: Run SonarCloud analysis
      run: |
        npx sonar-scanner \
            -Dsonar.projectKey=LukasRL_Laboratorio-final \
            -Dsonar.organization=lukasrl \
            -Dsonar.sources=. \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }} \
            -Dsonar.branch.name=LR-Laboratorio-final

    - name: SonarQube Quality Gate Check
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      uses: SonarSource/sonarqube-quality-gate-action@v1.1.0
      with:
        scanMetadataReportFile: './.scannerwork/report-task.txt'


#-----------------------SCA--------------------------------------
  SCA:
    needs: SAST
    runs-on: ubuntu-latest
    steps:

    - name: Set up Node.js 20
      uses: actions/setup-node@v2
      with:
        node-version: '20'

    - name: Checkout code
      uses: actions/checkout@v2

    - name: Run Snyk to check for vulnerabilities
      id: snyk_scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --all-projects --severity-threshold=high --json > snyk-output.json

#-----------------------Docker Build Image------------------------------------

  DockerBuild:
    needs: SCA
    runs-on: self-hosted
    steps:

    - name: Checkout code
      uses: actions/checkout@v2

    - name: Docker Login
      uses: docker/login-action@v3.0.0
      with:
        username: ${{ secrets.DOCKER_USER }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Build Docker
      run: |
        docker build --tag lukasrl/netflix-app:latest .

    - name: Push Docker
      run: |
        docker push lukasrl/netflix-app:latest

#-------------------- Docker Scan ------------------------------------------

  DockerScan:
    needs: DockerBuild
    runs-on: ubuntu-latest
    steps:

    - name: Docker Login
      uses: docker/login-action@v3.0.0
      with:
        username: ${{ secrets.DOCKER_USER }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Pull de la Imagen Docker
      run: | 
        docker pull lukasrl/netflix-app:latest

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'lukasrl/netflix-app:latest'
        format: 'table'

    - name: Push Docker
      run: |
        docker push lukasrl/netflix-app:latest

#-----------------------DAST (OWASP ZAP)-------------------------------------
  DAST:
    needs: DockerScan
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Start Application
      run: |
        docker run -d --name netflix-app -p 8080:8080 lukasrl/netflix-app:latest
        sleep 15 # Give the application some time to start

    - name: ZAP Scan
      uses: zaproxy/action-baseline@v0.12.0
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        docker_name: 'ghcr.io/zaproxy/zaproxy:stable'
        target: 'http://localhost:8080'
        rules_file_name: '.zap/rules.tsv'
        cmd_options: '-a'

    - name: Upload ZAP Report
      uses: actions/upload-artifact@v2
      with:
        name: zap-report
        path: zap_report.html

    - name: Check for High Severity Vulnerabilities
      run: |
        # Check if ZAP found any high severity issues
        if grep -q 'High' zap_report.html; then
          echo "High severity vulnerabilities found in ZAP scan."
          exit 1
        else
          echo "No high severity vulnerabilities found in ZAP scan."
        fi